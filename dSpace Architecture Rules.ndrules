<?xml version="1.0" encoding="utf-8"?>
<Queries>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>All classes should be below 220 LOC</Name>
warnif count > 0 

let onlyGeneradeClasses = JustMyCode.Types.Where(t => !t.IsGeneratedByCompiler)

from t in onlyGeneradeClasses

let trueMethods = t.Methods.Where(m => !m.IsPropertyGetter && !m.IsPropertySetter)

where !t.IsGeneratedByCompiler && t.NbLinesOfCode > 0

select new { t, t.NbLinesOfCode, trueMethods }

// Methods with more than 20 LOC OR 7 Cylco Complexity]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Classes without naming pattern</Name>
warnif count > 0 

let classBlacklist = new string[]{"Program"}
let namePatterns = new string[]
{
   "Manager",
   "Repository",
   "Parser",
   "Reader",
   "DisplayCommands",
}

let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                    && !classBlacklist.Contains(t.SimpleName) 
                                                    && !t.IsGeneratedByCompiler)

from t in managementClasses

where !namePatterns.Any(np => t.SimpleName.EndsWith(np))

select new { t, t.Methods }
]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namepattern Manager</Name>
warnif count > 0
 
let namePattern = "Manager"
let allowedMethods = new string[]{"Add","Update","Remove"}
let allowedPrefixes = new string[]{"Get"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                 && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler 
                                    && !m.IsPropertyGetter 
                                    && !m.IsPropertySetter
                                    && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }
]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namepattern Repository</Name>
warnif count > 0
 
let namePattern = "Repository"
let allowedMethods = new string[]{"Insert","Update","Delete", "Query"}
let allowedPrefixes = new string[]{}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                 && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler 
                                    && !m.IsPropertyGetter 
                                    && !m.IsPropertySetter
                                    && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namepattern Reader</Name>
warnif count > 0
 
let namePattern = "Reader"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Read"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                 && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler 
                                    && !m.IsPropertyGetter 
                                    && !m.IsPropertySetter
                                    && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }


]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namepattern Parser</Name>
warnif count > 0
 
let namePattern = "Parser"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"ParseFrom"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                 && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler 
                                    && !m.IsPropertyGetter 
                                    && !m.IsPropertySetter
                                    && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }


]]></Query>
  <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namepattern DisplayCommand</Name>
warnif count > 0
 
let namePattern = "DisplayCommand"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Display"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                 && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler 
                                    && !m.IsPropertyGetter 
                                    && !m.IsPropertySetter
                                    && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }


]]></Query>
</Queries>